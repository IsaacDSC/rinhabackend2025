<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/deployment/app/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deployment/app/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;  app_01:&#10;    build:&#10;      context: ../../.&#10;      target: final&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;      redis:&#10;        condition: service_healthy&#10;    ports:&#10;      - 3001:3333&#10;    environment:&#10;      - GQUEUE_URL=http://localhost:8080&#10;      - APP_PORT=3333&#10;      - REDIS_URL=redis:6379&#10;      - DATABASE_URL=idsc:admin@tcp(mysql:3306)/rinhabackend&#10;      - PROCESSOR_DEFAULT_URL=payment-processor-default:8001&#10;      - PROCESSOR_FALLBACK_URL=payment-processor-default:8002&#10;    networks:&#10;      - default&#10;      - payment-processor&#10;    deploy:&#10;      resources:&#10;        limits:&#10;          cpus: &quot;0.15&quot;&#10;          memory: &quot;42MB&quot;&#10;  app_02:&#10;    build:&#10;      context: ../../.&#10;      target: final&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;      redis:&#10;        condition: service_healthy&#10;    ports:&#10;      - 3002:3333&#10;    environment:&#10;      - GQUEUE_URL=http://localhost:8080&#10;      - APP_PORT=3333&#10;      - REDIS_URL=redis:6379&#10;      - DATABASE_URL=idsc:admin@tcp(mysql:3306)/rinhabackend&#10;      - PROCESSOR_DEFAULT_URL=payment-processor-default:8001&#10;      - PROCESSOR_FALLBACK_URL=payment-processor-default:8002&#10;    networks:&#10;      - default&#10;      - payment-processor&#10;    deploy:&#10;      resources:&#10;        limits:&#10;          cpus: &quot;0.15&quot;&#10;          memory: &quot;42MB&quot;&#10;&#10;  mysql:&#10;    image: mysql:8.0&#10;    container_name: mysql_db&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: admin&#10;      MYSQL_DATABASE: rinhabackend&#10;      MYSQL_USER: idsc&#10;      MYSQL_PASSWORD: admin&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;      - ./table.sql:/docker-entrypoint-initdb.d/01-init.sql&#10;    networks:&#10;      - default&#10;    healthcheck:&#10;      test: [ &quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;, &quot;-u&quot;, &quot;root&quot;, &quot;-padmin&quot; ]&#10;      timeout: 20s&#10;      retries: 10&#10;      interval: 30s&#10;      start_period: 60s&#10;    command: --default-authentication-plugin=mysql_native_password&#10;&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: redis_cache&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - default&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]&#10;      timeout: 3s&#10;      retries: 5&#10;      interval: 10s&#10;      start_period: 30s&#10;&#10;  payment-processor-1:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-1&#10;&#10;  payment-processor-db-1:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-db-1&#10;&#10;  payment-processor-2:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-2&#10;&#10;  payment-processor-db-2:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-db-2&#10;&#10;networks:&#10;  payment-processor:&#10;    name: payment-processor&#10;    driver: bridge&#10;  payment-processor-db:&#10;    driver: bridge&#10;&#10;volumes:&#10;  mysql_data:&#10;  redis_data:&#10;  postgres-socket-01:&#10;  postgres-socket-02:&#10;" />
              <option name="updatedContent" value="services:&#10;  app_01:&#10;    build:&#10;      context: ../../.&#10;      target: final&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;      redis:&#10;        condition: service_healthy&#10;      payment-processor-default:&#10;        condition: service_started&#10;      payment-processor-fallback:&#10;        condition: service_started&#10;    ports:&#10;      - 3001:3333&#10;    environment:&#10;      - GQUEUE_URL=http://localhost:8080&#10;      - APP_PORT=3333&#10;      - REDIS_URL=redis:6379&#10;      - DATABASE_URL=idsc:admin@tcp(mysql:3306)/rinhabackend&#10;      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080&#10;      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080&#10;    networks:&#10;      - default&#10;      - payment-processor&#10;    deploy:&#10;      resources:&#10;        limits:&#10;          cpus: &quot;0.15&quot;&#10;          memory: &quot;42MB&quot;&#10;  app_02:&#10;    build:&#10;      context: ../../.&#10;      target: final&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;      redis:&#10;        condition: service_healthy&#10;      payment-processor-default:&#10;        condition: service_started&#10;      payment-processor-fallback:&#10;        condition: service_started&#10;    ports:&#10;      - 3002:3333&#10;    environment:&#10;      - GQUEUE_URL=http://localhost:8080&#10;      - APP_PORT=3333&#10;      - REDIS_URL=redis:6379&#10;      - DATABASE_URL=idsc:admin@tcp(mysql:3306)/rinhabackend&#10;      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080&#10;      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080&#10;    networks:&#10;      - default&#10;      - payment-processor&#10;    deploy:&#10;      resources:&#10;        limits:&#10;          cpus: &quot;0.15&quot;&#10;          memory: &quot;42MB&quot;&#10;&#10;  mysql:&#10;    image: mysql:8.0&#10;    container_name: mysql_db&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: admin&#10;      MYSQL_DATABASE: rinhabackend&#10;      MYSQL_USER: idsc&#10;      MYSQL_PASSWORD: admin&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;      - ./table.sql:/docker-entrypoint-initdb.d/01-init.sql&#10;    networks:&#10;      - default&#10;    healthcheck:&#10;      test: [ &quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;, &quot;-u&quot;, &quot;root&quot;, &quot;-padmin&quot; ]&#10;      timeout: 20s&#10;      retries: 10&#10;      interval: 30s&#10;      start_period: 60s&#10;    command: --default-authentication-plugin=mysql_native_password&#10;&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: redis_cache&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - default&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]&#10;      timeout: 3s&#10;      retries: 5&#10;      interval: 10s&#10;      start_period: 30s&#10;&#10;  payment-processor-default:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-1&#10;    networks:&#10;      - payment-processor&#10;      - payment-processor-db&#10;&#10;  payment-processor-fallback:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-2&#10;    networks:&#10;      - payment-processor&#10;      - payment-processor-db&#10;&#10;  payment-processor-db-1:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-db-1&#10;    networks:&#10;      - payment-processor-db&#10;&#10;  payment-processor-db-2:&#10;    extends:&#10;      file: ../payment-processor/docker-compose.yml&#10;      service: payment-processor-db-2&#10;    networks:&#10;      - payment-processor-db&#10;&#10;networks:&#10;  default:&#10;    driver: bridge&#10;  payment-processor:&#10;    external: true&#10;  payment-processor-db:&#10;    driver: bridge&#10;&#10;volumes:&#10;  mysql_data:&#10;  redis_data:&#10;  postgres-socket-01:&#10;  postgres-socket-02:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/internal/payprocess/default.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/internal/payprocess/default.go" />
              <option name="originalContent" value="package payprocess&#10;&#10;import (&#10;&#9;&quot;bytes&quot;&#10;&#9;&quot;context&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;github.com/google/uuid&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;type HealthResponse struct {&#10;&#9;Failing         bool `json:&quot;failing&quot;`&#10;&#9;MinResponseTime int  `json:&quot;minResponseTime&quot;`&#10;}&#10;&#10;type DefaultProcessor struct {&#10;&#9;client *http.Client&#10;}&#10;&#10;func NewDefaultProcessor() *DefaultProcessor {&#10;&#9;return &amp;DefaultProcessor{&#10;&#9;&#9;client: &amp;http.Client{&#10;&#9;&#9;&#9;Timeout: 30 * time.Second,&#10;&#9;&#9;},&#10;&#9;}&#10;}&#10;&#10;var _ PayProcessor = (*DefaultProcessor)(nil)&#10;&#10;func (d DefaultProcessor) Name() string {&#10;&#9;return &quot;processor.default&quot;&#10;}&#10;&#10;func (d DefaultProcessor) Health() error {&#10;&#9;const url = &quot;http://localhost:8001/payments/service-health&quot;&#10;&#10;&#9;resp, err := http.Get(url)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to make health check request: %w&quot;, err)&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#10;&#9;if resp.StatusCode != 200 {&#10;&#9;&#9;return fmt.Errorf(&quot;health check failed: received status %d&quot;, resp.StatusCode)&#10;&#9;}&#10;&#10;&#9;var healthResp HealthResponse&#10;&#9;if err := json.NewDecoder(resp.Body).Decode(&amp;healthResp); err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to parse health response: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if healthResp.Failing {&#10;&#9;&#9;return fmt.Errorf(&quot;health check indicates service is failing&quot;)&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;type PaymentRequest struct {&#10;&#9;CorrelationID string `json:&quot;correlationId&quot;`&#10;&#9;Amount        string `json:&quot;amount&quot;`&#10;&#9;RequestTime   string `json:&quot;requestAt&quot;`&#10;}&#10;&#10;type PaymentResponse struct {&#10;&#9;Message string `json:&quot;message&quot;`&#10;}&#10;&#10;func (d DefaultProcessor) ProcessPayment(ctx context.Context, payload PaymentRequest) error {&#10;&#9;const url = &quot;http://localhost:8001/payments&quot;&#10;&#10;&#9;jsonData, err := json.Marshal(payload)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to marshal payment request: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;req, err := http.NewRequestWithContext(ctx, &quot;POST&quot;, url, bytes.NewBuffer(jsonData))&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to create HTTP request: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;req.Header.Set(&quot;X-Correlation-ID&quot;, payload.CorrelationID)&#10;&#10;&#9;resp, err := d.client.Do(req)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to make payment request: %w&quot;, err)&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#10;&#9;if resp.StatusCode &lt; 200 || resp.StatusCode &gt;= 300 {&#10;&#9;&#9;return fmt.Errorf(&quot;payment request failed: received status %d&quot;, resp.StatusCode)&#10;&#9;}&#10;&#10;&#9;var paymentResp PaymentResponse&#10;&#9;if err := json.NewDecoder(resp.Body).Decode(&amp;paymentResp); err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to parse payment response: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;func (d DefaultProcessor) setDefaultHeaders(req *http.Request) {&#10;&#9;req.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;&#9;req.Header.Set(&quot;Accept&quot;, &quot;application/json&quot;)&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, fmt.Sprintf(&quot;%s/1.0&quot;, d.Name()))&#10;&#9;req.Header.Set(&quot;X-Request-Id&quot;, uuid.New().String())&#10;}&#10;" />
              <option name="updatedContent" value="package payprocess&#10;&#10;import (&#10;&#9;&quot;bytes&quot;&#10;&#9;&quot;context&quot;&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;github.com/google/uuid&quot;&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;time&quot;&#10;)&#10;&#10;type HealthResponse struct {&#10;&#9;Failing         bool `json:&quot;failing&quot;`&#10;&#9;MinResponseTime int  `json:&quot;minResponseTime&quot;`&#10;}&#10;&#10;type DefaultProcessor struct {&#10;&#9;client *http.Client&#10;}&#10;&#10;func NewDefaultProcessor() *DefaultProcessor {&#10;&#9;return &amp;DefaultProcessor{&#10;&#9;&#9;client: &amp;http.Client{&#10;&#9;&#9;&#9;Timeout: 30 * time.Second,&#10;&#9;&#9;},&#10;&#9;}&#10;}&#10;&#10;var _ PayProcessor = (*DefaultProcessor)(nil)&#10;&#10;func (d DefaultProcessor) Name() string {&#10;&#9;return &quot;processor.default&quot;&#10;}&#10;&#10;func (d DefaultProcessor) Health() error {&#10;&#9;const url = &quot;http://localhost:8001/payments/service-health&quot;&#10;&#10;&#9;req, err := http.NewRequest(&quot;GET&quot;, url, nil)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to create health check request: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;resp, err := d.client.Do(req)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to make health check request: %w&quot;, err)&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#10;&#9;if resp.StatusCode != 200 {&#10;&#9;&#9;return fmt.Errorf(&quot;health check failed: received status %d&quot;, resp.StatusCode)&#10;&#9;}&#10;&#10;&#9;var healthResp HealthResponse&#10;&#9;if err := json.NewDecoder(resp.Body).Decode(&amp;healthResp); err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to parse health response: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;if healthResp.Failing {&#10;&#9;&#9;return fmt.Errorf(&quot;health check indicates service is failing&quot;)&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;type PaymentRequest struct {&#10;&#9;CorrelationID string `json:&quot;correlationId&quot;`&#10;&#9;Amount        string `json:&quot;amount&quot;`&#10;&#9;RequestTime   string `json:&quot;requestAt&quot;`&#10;}&#10;&#10;type PaymentResponse struct {&#10;&#9;Message string `json:&quot;message&quot;`&#10;}&#10;&#10;func (d DefaultProcessor) ProcessPayment(ctx context.Context, payload PaymentRequest) error {&#10;&#9;const url = &quot;http://localhost:8001/payments&quot;&#10;&#10;&#9;jsonData, err := json.Marshal(payload)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to marshal payment request: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;req, err := http.NewRequestWithContext(ctx, &quot;POST&quot;, url, bytes.NewBuffer(jsonData))&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to create HTTP request: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;req.Header.Set(&quot;X-Correlation-ID&quot;, payload.CorrelationID)&#10;&#10;&#9;resp, err := d.client.Do(req)&#10;&#9;if err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to make payment request: %w&quot;, err)&#10;&#9;}&#10;&#9;defer resp.Body.Close()&#10;&#10;&#9;if resp.StatusCode &lt; 200 || resp.StatusCode &gt;= 300 {&#10;&#9;&#9;return fmt.Errorf(&quot;payment request failed: received status %d&quot;, resp.StatusCode)&#10;&#9;}&#10;&#10;&#9;var paymentResp PaymentResponse&#10;&#9;if err := json.NewDecoder(resp.Body).Decode(&amp;paymentResp); err != nil {&#10;&#9;&#9;return fmt.Errorf(&quot;failed to parse payment response: %w&quot;, err)&#10;&#9;}&#10;&#10;&#9;return nil&#10;}&#10;&#10;func (d DefaultProcessor) setDefaultHeaders(req *http.Request) {&#10;&#9;req.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;&#9;req.Header.Set(&quot;Accept&quot;, &quot;application/json&quot;)&#10;&#9;req.Header.Set(&quot;User-Agent&quot;, fmt.Sprintf(&quot;%s/1.0&quot;, d.Name()))&#10;&#9;req.Header.Set(&quot;X-Request-Id&quot;, uuid.New().String())&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>